# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Abonado {
  _count: AbonadoCount
  apellido: String!
  createdAt: DateTime!
  cuit: String!
  email: String!
  especialidad: EEspecialidad!
  grupo(cursor: GrupoWhereUniqueInput, distinct: [GrupoScalarFieldEnum!], orderBy: [GrupoOrderByWithRelationInput!], skip: Int, take: Int, where: GrupoWhereInput): [Grupo!]!
  id: Int!
  nombre: String!
  razonSocial: String
  updatedAt: DateTime!
}

type AbonadoAvgAggregate {
  id: Float
}

input AbonadoAvgOrderByAggregateInput {
  id: SortOrder
}

type AbonadoCount {
  grupo: Int!
}

type AbonadoCountAggregate {
  _all: Int!
  apellido: Int!
  createdAt: Int!
  cuit: Int!
  email: Int!
  especialidad: Int!
  id: Int!
  nombre: Int!
  razonSocial: Int!
  updatedAt: Int!
}

input AbonadoCountOrderByAggregateInput {
  apellido: SortOrder
  createdAt: SortOrder
  cuit: SortOrder
  email: SortOrder
  especialidad: SortOrder
  id: SortOrder
  nombre: SortOrder
  razonSocial: SortOrder
  updatedAt: SortOrder
}

input AbonadoCreateInput {
  apellido: String!
  createdAt: DateTime
  cuit: String!
  email: String!
  especialidad: EEspecialidad
  grupo: GrupoCreateNestedManyWithoutAbonadoInput
  nombre: String!
  razonSocial: String
  updatedAt: DateTime
}

input AbonadoCreateManyInput {
  apellido: String!
  createdAt: DateTime
  cuit: String!
  email: String!
  especialidad: EEspecialidad
  id: Int
  nombre: String!
  razonSocial: String
  updatedAt: DateTime
}

type AbonadoGroupBy {
  _avg: AbonadoAvgAggregate
  _count: AbonadoCountAggregate
  _max: AbonadoMaxAggregate
  _min: AbonadoMinAggregate
  _sum: AbonadoSumAggregate
  apellido: String!
  createdAt: DateTime!
  cuit: String!
  email: String!
  especialidad: EEspecialidad!
  id: Int!
  nombre: String!
  razonSocial: String
  updatedAt: DateTime!
}

type AbonadoMaxAggregate {
  apellido: String
  createdAt: DateTime
  cuit: String
  email: String
  especialidad: EEspecialidad
  id: Int
  nombre: String
  razonSocial: String
  updatedAt: DateTime
}

input AbonadoMaxOrderByAggregateInput {
  apellido: SortOrder
  createdAt: SortOrder
  cuit: SortOrder
  email: SortOrder
  especialidad: SortOrder
  id: SortOrder
  nombre: SortOrder
  razonSocial: SortOrder
  updatedAt: SortOrder
}

type AbonadoMinAggregate {
  apellido: String
  createdAt: DateTime
  cuit: String
  email: String
  especialidad: EEspecialidad
  id: Int
  nombre: String
  razonSocial: String
  updatedAt: DateTime
}

input AbonadoMinOrderByAggregateInput {
  apellido: SortOrder
  createdAt: SortOrder
  cuit: SortOrder
  email: SortOrder
  especialidad: SortOrder
  id: SortOrder
  nombre: SortOrder
  razonSocial: SortOrder
  updatedAt: SortOrder
}

input AbonadoOrderByWithAggregationInput {
  _avg: AbonadoAvgOrderByAggregateInput
  _count: AbonadoCountOrderByAggregateInput
  _max: AbonadoMaxOrderByAggregateInput
  _min: AbonadoMinOrderByAggregateInput
  _sum: AbonadoSumOrderByAggregateInput
  apellido: SortOrder
  createdAt: SortOrder
  cuit: SortOrder
  email: SortOrder
  especialidad: SortOrder
  id: SortOrder
  nombre: SortOrder
  razonSocial: SortOrder
  updatedAt: SortOrder
}

input AbonadoOrderByWithRelationInput {
  apellido: SortOrder
  createdAt: SortOrder
  cuit: SortOrder
  email: SortOrder
  especialidad: SortOrder
  grupo: GrupoOrderByRelationAggregateInput
  id: SortOrder
  nombre: SortOrder
  razonSocial: SortOrder
  updatedAt: SortOrder
}

input AbonadoRelationFilter {
  is: AbonadoWhereInput
  isNot: AbonadoWhereInput
}

enum AbonadoScalarFieldEnum {
  apellido
  createdAt
  cuit
  email
  especialidad
  id
  nombre
  razonSocial
  updatedAt
}

input AbonadoScalarWhereWithAggregatesInput {
  AND: [AbonadoScalarWhereWithAggregatesInput!]
  NOT: [AbonadoScalarWhereWithAggregatesInput!]
  OR: [AbonadoScalarWhereWithAggregatesInput!]
  apellido: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  cuit: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  especialidad: EnumEEspecialidadWithAggregatesFilter
  id: IntWithAggregatesFilter
  nombre: StringWithAggregatesFilter
  razonSocial: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AbonadoSumAggregate {
  id: Int
}

input AbonadoSumOrderByAggregateInput {
  id: SortOrder
}

input AbonadoUpdateInput {
  apellido: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  cuit: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  especialidad: EnumEEspecialidadFieldUpdateOperationsInput
  grupo: GrupoUpdateManyWithoutAbonadoInput
  nombre: StringFieldUpdateOperationsInput
  razonSocial: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AbonadoUpdateManyMutationInput {
  apellido: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  cuit: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  especialidad: EnumEEspecialidadFieldUpdateOperationsInput
  nombre: StringFieldUpdateOperationsInput
  razonSocial: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AbonadoWhereInput {
  AND: [AbonadoWhereInput!]
  NOT: [AbonadoWhereInput!]
  OR: [AbonadoWhereInput!]
  apellido: StringFilter
  createdAt: DateTimeFilter
  cuit: StringFilter
  email: StringFilter
  especialidad: EnumEEspecialidadFilter
  grupo: GrupoListRelationFilter
  id: IntFilter
  nombre: StringFilter
  razonSocial: StringNullableFilter
  updatedAt: DateTimeFilter
}

input AbonadoWhereUniqueInput {
  email: String
  id: Int
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAbonado {
  _avg: AbonadoAvgAggregate
  _count: AbonadoCountAggregate
  _max: AbonadoMaxAggregate
  _min: AbonadoMinAggregate
  _sum: AbonadoSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

enum EEspecialidad {
  PSICOLOGIA
}

input EnumEEspecialidadFieldUpdateOperationsInput {
  set: EEspecialidad
}

input EnumEEspecialidadFilter {
  equals: EEspecialidad
  in: [EEspecialidad!]
  not: NestedEnumEEspecialidadFilter
  notIn: [EEspecialidad!]
}

input EnumEEspecialidadWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEEspecialidadFilter
  _min: NestedEnumEEspecialidadFilter
  equals: EEspecialidad
  in: [EEspecialidad!]
  not: NestedEnumEEspecialidadWithAggregatesFilter
  notIn: [EEspecialidad!]
}

type Grupo {
  abonadoId: Int!
  activo: Boolean!
  createdAt: DateTime!
  id: Int!
  nombre: String!
  updatedAt: DateTime!
}

input GrupoCreateManyAbonadoInput {
  activo: Boolean
  createdAt: DateTime
  id: Int
  nombre: String!
  updatedAt: DateTime
}

input GrupoCreateManyAbonadoInputEnvelope {
  data: [GrupoCreateManyAbonadoInput!]!
  skipDuplicates: Boolean
}

input GrupoCreateNestedManyWithoutAbonadoInput {
  connect: [GrupoWhereUniqueInput!]
  connectOrCreate: [GrupoCreateOrConnectWithoutAbonadoInput!]
  create: [GrupoCreateWithoutAbonadoInput!]
  createMany: GrupoCreateManyAbonadoInputEnvelope
}

input GrupoCreateOrConnectWithoutAbonadoInput {
  create: GrupoCreateWithoutAbonadoInput!
  where: GrupoWhereUniqueInput!
}

input GrupoCreateWithoutAbonadoInput {
  activo: Boolean
  createdAt: DateTime
  nombre: String!
  updatedAt: DateTime
}

input GrupoListRelationFilter {
  every: GrupoWhereInput
  none: GrupoWhereInput
  some: GrupoWhereInput
}

input GrupoOrderByRelationAggregateInput {
  _count: SortOrder
}

input GrupoOrderByWithRelationInput {
  abonado: AbonadoOrderByWithRelationInput
  abonadoId: SortOrder
  activo: SortOrder
  createdAt: SortOrder
  id: SortOrder
  nombre: SortOrder
  updatedAt: SortOrder
}

enum GrupoScalarFieldEnum {
  abonadoId
  activo
  createdAt
  id
  nombre
  updatedAt
}

input GrupoScalarWhereInput {
  AND: [GrupoScalarWhereInput!]
  NOT: [GrupoScalarWhereInput!]
  OR: [GrupoScalarWhereInput!]
  abonadoId: IntFilter
  activo: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  nombre: StringFilter
  updatedAt: DateTimeFilter
}

input GrupoUpdateManyMutationInput {
  activo: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  nombre: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GrupoUpdateManyWithWhereWithoutAbonadoInput {
  data: GrupoUpdateManyMutationInput!
  where: GrupoScalarWhereInput!
}

input GrupoUpdateManyWithoutAbonadoInput {
  connect: [GrupoWhereUniqueInput!]
  connectOrCreate: [GrupoCreateOrConnectWithoutAbonadoInput!]
  create: [GrupoCreateWithoutAbonadoInput!]
  createMany: GrupoCreateManyAbonadoInputEnvelope
  delete: [GrupoWhereUniqueInput!]
  deleteMany: [GrupoScalarWhereInput!]
  disconnect: [GrupoWhereUniqueInput!]
  set: [GrupoWhereUniqueInput!]
  update: [GrupoUpdateWithWhereUniqueWithoutAbonadoInput!]
  updateMany: [GrupoUpdateManyWithWhereWithoutAbonadoInput!]
  upsert: [GrupoUpsertWithWhereUniqueWithoutAbonadoInput!]
}

input GrupoUpdateWithWhereUniqueWithoutAbonadoInput {
  data: GrupoUpdateWithoutAbonadoInput!
  where: GrupoWhereUniqueInput!
}

input GrupoUpdateWithoutAbonadoInput {
  activo: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  nombre: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GrupoUpsertWithWhereUniqueWithoutAbonadoInput {
  create: GrupoCreateWithoutAbonadoInput!
  update: GrupoUpdateWithoutAbonadoInput!
  where: GrupoWhereUniqueInput!
}

input GrupoWhereInput {
  AND: [GrupoWhereInput!]
  NOT: [GrupoWhereInput!]
  OR: [GrupoWhereInput!]
  abonado: AbonadoRelationFilter
  abonadoId: IntFilter
  activo: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  nombre: StringFilter
  updatedAt: DateTimeFilter
}

input GrupoWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createAbonado(data: AbonadoCreateInput!): Abonado!
  createManyAbonado(data: [AbonadoCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteAbonado(where: AbonadoWhereUniqueInput!): Abonado
  deleteManyAbonado(where: AbonadoWhereInput): AffectedRowsOutput!
  updateAbonado(data: AbonadoUpdateInput!, where: AbonadoWhereUniqueInput!): Abonado
  updateManyAbonado(data: AbonadoUpdateManyMutationInput!, where: AbonadoWhereInput): AffectedRowsOutput!
  upsertAbonado(create: AbonadoCreateInput!, update: AbonadoUpdateInput!, where: AbonadoWhereUniqueInput!): Abonado!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumEEspecialidadFilter {
  equals: EEspecialidad
  in: [EEspecialidad!]
  not: NestedEnumEEspecialidadFilter
  notIn: [EEspecialidad!]
}

input NestedEnumEEspecialidadWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEEspecialidadFilter
  _min: NestedEnumEEspecialidadFilter
  equals: EEspecialidad
  in: [EEspecialidad!]
  not: NestedEnumEEspecialidadWithAggregatesFilter
  notIn: [EEspecialidad!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  abonado(where: AbonadoWhereUniqueInput!): Abonado
  abonados(cursor: AbonadoWhereUniqueInput, distinct: [AbonadoScalarFieldEnum!], orderBy: [AbonadoOrderByWithRelationInput!], skip: Int, take: Int, where: AbonadoWhereInput): [Abonado!]!
  aggregateAbonado(cursor: AbonadoWhereUniqueInput, orderBy: [AbonadoOrderByWithRelationInput!], skip: Int, take: Int, where: AbonadoWhereInput): AggregateAbonado!
  findFirstAbonado(cursor: AbonadoWhereUniqueInput, distinct: [AbonadoScalarFieldEnum!], orderBy: [AbonadoOrderByWithRelationInput!], skip: Int, take: Int, where: AbonadoWhereInput): Abonado
  groupByAbonado(by: [AbonadoScalarFieldEnum!]!, having: AbonadoScalarWhereWithAggregatesInput, orderBy: [AbonadoOrderByWithAggregationInput!], skip: Int, take: Int, where: AbonadoWhereInput): [AbonadoGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}
